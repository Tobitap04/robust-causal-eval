from services.llm_service import LLMService


def preprocessing_func(question: str, option: str) -> str:
    """
    Preprocesses the input question before sending it to the LLM.
    Args:
        question (str): The original input question to preprocess.
        option (str): The preprocessing method to apply ('none', ).
    Returns:
        str: The preprocessed question ready for prompting.
    Raises:
        ValueError: If an invalid preprocessing type is specified.
    """
    if option == "none":
        return question  # No preprocessing applied
    else:
        raise ValueError(f"Invalid preprocessing type specified: {option}.")


def inprocessing_func(prompt: str, option: str, llm_service: LLMService, temp: float) -> str:
    """
    Handles the interaction with the LLM by applying a specified prompting technique
    during the generation process.
    Args:
        prompt (str): The input prompt to be sent to the LLM.
        option (str): The prompting technique to apply ('none', ).
        llm_service (LLMService): An instance of the LLM service used to generate the response.
        temp (float): Temperature setting controlling the randomness of the LLM output.
    Returns:
        str: The generated response from the LLM after applying the specified prompting technique.
    Raises:
        ValueError: If an invalid inprocessing technique is specified.
    """
    if option == "none":
        return llm_service.get_llm_response(prompt=prompt, temperature=temp)
    else:
        raise ValueError(f"Invalid inprocessing type specified: {option}.")

def postprocessing_func(response: str, option: str) -> str:
    """
    Postprocesses the response generated by the LLM.
    Args:
        response (str): The raw response from the LLM to be postprocessed.
        option (str): The postprocessing method to apply ('none', ).
    Returns:
        str: The postprocessed and refined response.
    Raises:
        ValueError: If an invalid postprocessing technique is specified.
    """
    if option == "none":
        return response  # No postprocessing applied
    else:
        raise ValueError(f"Invalid postprocessing type specified: {option}.")